{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","ReverseButton","onClick","useState","isReversed","setIsReversed","type","className","classNames","App","NONE","sortType","setSortType","reorderedGoods","goods","visibleGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","getReorderedGoods","isChanged","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCL,IAAME,EAA2B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClC,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACE,wBACEC,KAAK,SACLC,UAAWC,IAAW,oBAAqB,CACzC,YAAaJ,IAEfF,QAdgB,WAClBG,GAAeD,GAEXF,GACFA,KAKF,sBAYSO,EAAU,WACrB,MAAgCN,mBAASJ,EAASW,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAUMC,EA/DD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUP,EACZ,EADYA,WAENW,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKZ,EAASiB,SACZD,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MACF,KAAKpB,EAASsB,OACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAU7D,OAJIlB,GACFW,EAAaQ,UAGRR,EA0CgBS,CAAkBxB,EAAiB,CACxDW,WACAP,YAAY,IAGRqB,EAAYd,IAAaZ,EAASW,KAExC,OACE,sBAAKH,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWC,IAAW,iBAAkB,CACtC,WAAYG,IAAaZ,EAASiB,WAEpCd,QAAS,kBAAMU,EAAYb,EAASiB,WALtC,iCAUA,wBACEV,KAAK,SACLC,UAAWC,IAAW,oBAAqB,CACzC,WAAYG,IAAaZ,EAASsB,SAEpCnB,QAAS,kBAAMU,EAAYb,EAASsB,SALtC,4BAUA,cAAC,EAAD,CAAenB,QAlCM,eAoCpBuB,GACC,wBACEnB,KAAK,SACLC,UAAWC,IAAW,mBAAoB,CACxC,WAAYiB,IAEdvB,QA9CI,WACZU,EAAYb,EAASW,OAwCf,sBAYJ,6BACGG,EAAea,KAAI,SAACC,GAAD,OAClB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCzInBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.57f6923c.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => good1.length - good2.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype Props = {\n  onClick?: () => void;\n};\n\nconst ReverseButton: FC<Props> = ({ onClick }) => {\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleClick = () => {\n    setIsReversed(!isReversed);\n\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames('button is-warning', {\n        'is-light': !isReversed,\n      })}\n      onClick={handleClick}\n    >\n      Reverse\n    </button>\n  );\n};\n\nexport const App: FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n  };\n\n  const handleReverseClick = () => {\n    // здесь можно добавить код, который будет выполняться при клике на кнопку ReverseButton\n  };\n\n  const reorderedGoods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed: false,\n  });\n\n  const isChanged = sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <ReverseButton onClick={handleReverseClick} />\n\n        {isChanged && (\n          <button\n            type=\"button\"\n            className={classNames('button is-danger', {\n              'is-light': isChanged,\n            })}\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {reorderedGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}